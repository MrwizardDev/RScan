pip install requests beautifulsoup4

import requests
from bs4 import BeautifulSoup
import re

# Define known malicious patterns (e.g., suspicious scripts, iframes, etc.)
malicious_patterns = [
    re.compile(r'<script.*?src=["\'].*?\.js["\'].*?>', re.IGNORECASE),
    re.compile(r'<iframe.*?src=["\'].*?["\'].*?>', re.IGNORECASE),
    re.compile(r'onerror=["\'].*?["\']', re.IGNORECASE),  # Inline event handlers often used in attacks
    re.compile(r'javascript:.*', re.IGNORECASE),  # Inline JavaScript URLs
    re.compile(r'eval\(', re.IGNORECASE),  # Usage of eval (often used in obfuscated scripts)
    re.compile(r'<meta.*?http-equiv=["\']refresh["\'].*?url=.*?>', re.IGNORECASE),  # Meta tag redirect
    # Add more patterns as needed
]

def detect_malware(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    detected_malware = []

    # Check the HTML content against malicious patterns
    for pattern in malicious_patterns:
        if soup.find_all(string=pattern):
            detected_malware.append(f"Suspicious pattern found: {pattern.pattern}")

    return detected_malware

def scan_website(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print(f"Scanning {url}...")
            detected_malware = detect_malware(response.text)

            if detected_malware:
                print(f"Malware detected on {url}:")
                for item in detected_malware:
                    print(item)
            else:
                print(f"No malware detected on {url}.")
        else:
            print(f"Failed to retrieve the website. Status code: {response.status_code}")
    except requests.RequestException as e:
        print(f"An error occurred while trying to access {url}: {e}")

if __name__ == "__main__":
    website_url = input("Enter the URL of the website to scan: ")
    scan_website(website_url)
